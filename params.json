{"tagline":"Extensions and Tools for F# Programming","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Use via NuGET\r\n\r\n    Install-Package FSharpx.Core \r\n    Install-Package FSharpx.Http\r\n    Install-Package FSharpx.Observable\r\n    Install-Package FSharpx.Compatibility.OCaml  \r\n    Install-Package FSharpx.TypeProviders\r\n    Install-Package FSharpx.TypeProviders.{Documents,Freebase,Graph,AppSettings,Excel,Math,Regex,Machine,Xaml}\r\n\r\n## FSharpx Core\r\n\r\nFSharpx.Core is a collection of general functional constructs extending F#. Its main target is F# but\r\nit aims to be compatible with all .NET languages wherever possible.\r\n\r\nFSharpx.Core provides:\r\n * Several standard monads: State, Reader, Writer, Either, Continuation, Distribution\r\n * Purely functional data structures: Queues, double-ended Queues, BottomUpMergeSort, RandomAccessList, Vector, RoseTree\r\n * Validation applicative functor\r\n * General functions like flip\r\n * Additional functions around collections\r\n * Functions to make C# - F# interop easier\r\n * [Async extensions, Reusable agents and Observable extensions](https://github.com/fsharp/fsharpx/wiki/FSharpx-Async-Extensions)\r\n\r\n## Type Providers\r\n\r\nFSharpx provides some very interesting F# type providers. At the moment we have:\r\n\r\n * FSharpx.TypeProviders.AppSettings which generates setters and getters for application settings files.\r\n * FSharpx.TypeProviders.Documents which allows strongly typed access to JSON, XML and CSV files.\r\n * FSharpx.TypeProviders.Excel which provides strongly typed access to Excel spread sheets.\r\n * FSharpx.TypeProviders.Graph which includes type providers for state machines and graphs.\r\n * FSharpx.TypeProviders.Math which contains a type provider for vector data structures.\r\n * FSharpx.TypeProviders.Regex which allows to access regular expressions in a strongly typed manner.\r\n * FSharpx.TypeProviders.Machine which provides strongly typed access to the Registry and the file system.\r\n * FSharpx.TypeProviders.Xaml which includes a type provider for XAML files and therefore enables the use of the Visual Studios WPF Designer from F#.\r\n * FSharpx.TypeProviders.Freebase which allows to access the Freebase database with strong typing.\r\n\r\nAt the moment all type providers should work with .NET 4.0 and .NET 4.5 and F# 3.0.\r\n\r\n### Building the project\r\n\r\nRead the wiki page about [Build](https://github.com/fsharp/fsharpx/wiki/Build)\r\n\r\nIn order to build and test the type providers do the following:\r\n\r\n * Open FSharpx.WithTypeProviders.sln with Visual Studio 2012\r\n * Set FSharpx.TypeProviders as startup project\r\n * In the properties of FSharpx.TypeProviders:\r\n   * Set the start action to \"external program\" and \"C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\IDE\\devenv.exe\"\r\n   * Set the command line argument to \"C:\\code\\fsharpx\\FSharpx.TypeProviders.Tests.sln\" (adjust the path to match to your system)\r\n * Run the project --> A new Visual Studio 2012 instance should opened with FSharpx.TypeProviders.Tests.sln\r\n\r\n","name":"Fsharpx","google":""}